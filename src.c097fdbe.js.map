{"version":3,"sources":["task1.js","task2.js","task3.1.js","task3.2.js","task3.3.js","index.js"],"names":["startBtn","document","querySelector","stopBtn","addEventListener","clickOnStart","clickOnStop","isActive","intervalId","setInterval","changeBodyBgcolor","console","log","body","style","background","Math","floor","random","toString","clearInterval","getRandomHexColor","refs","btnCount","clock","input","getElementById","days","hours","minutes","CountdownTimer","constructor","targetDate","seconds","start","startTime","Date","countTime","timeCount","convertMs","updateClockface","ms","pad","hour","paddays","minute","second","value","String","padStart","textContent","timer","delay","Promise","resolve","logger","time","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.c097fdbe.js","sourceRoot":"../src","sourcesContent":["const startBtn = document.querySelector('[data-start]');\nconst stopBtn = document.querySelector('[data-stop]');\n\n\nstartBtn.addEventListener('click', clickOnStart);\nstopBtn.addEventListener('click', clickOnStop);\n\n\nlet isActive = false;\nfunction clickOnStart(){\n    if(isActive){\n        return;\n    }\n    isActive = true;\n    intervalId = setInterval(changeBodyBgcolor,1000,1000);\n};\n\nfunction changeBodyBgcolor () {\n   console.log(document.body.style.background = `#${Math.floor(Math.random() * 16777215).toString(16)}`);\n}\n\nfunction clickOnStop () {\n    clearInterval(intervalId);\n    isActive = false;\n}\n\nfunction getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }\n//   console.log(getRandomHexColor)","\nconst refs = {\nbtnCount: document.querySelector('[data-startcount]'),\nclock: document.querySelector('.js-clockface'),\ninput: document.getElementById('[date-selector]'),\ndays: document.querySelector('[data-days]'),\nhours: document.querySelector('[data-hours]'),\nminutes: document.querySelector('[data-minutes]'),\nhours: document.querySelector('[data-seconds]'),\n};\n\n\nclass CountdownTimer {\n    constructor({targetDate}) {\n        this.targetDate = targetDate;\n        this.intervalId = null;\n        this.isActive = false;\n        this.refs = {\n            btnCount: document.querySelector('[data-startcount]'),\n            clock: document.querySelector('.js-clockface'),\n            input: document.getElementById('[date-selector]'),\n            days: document.querySelector('[data-days]'),\n            hours: document.querySelector('[data-hours]'),\n            minutes: document.querySelector('[data-minutes]'),\n            seconds: document.querySelector('[data-seconds]'),\n            };\n    }\nstart(){\n        if (this.isActive) {\n            return;\n        }\n   \n    this.isActive = true;    \n        setInterval(() => { \n        const startTime = new Date();\n        const countTime = this.targetDate - startTime;\n        const timeCount= this.convertMs(countTime);\n        this.updateClockface(timeCount);\n        }\n    , 1000);\n    }\n\nconvertMs(ms) {\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n      \n       \n        const days = this.pad(Math.floor(ms / day));\n        const hours = this.paddays(Math.floor((ms % day) / hour));\n        const minutes = this.paddays(Math.floor(((ms % day) % hour) / minute));\n        const seconds = this.paddays(Math.floor((((ms % day) % hour) % minute) / second));\n      \n        return { days, hours, minutes, seconds };\n      }\n      \npad(value) {\n        return String(value).padStart(3,'0')};\n    \npaddays(value) {\n            return String(value).padStart(2,'0')};\n            \nupdateClockface ({ days, hours, minutes, seconds }) {\n        this.refs.days.textContent = `${days}`;\n        this.refs.hours.textContent = `${hours}`;\n        this.refs.minutes.textContent = `${minutes}`;\n        this.refs.seconds.textContent = `${seconds}`;\n            }     \n}\n\n\nfunction updateClockface ({ days, hours, minutes, seconds }) {\n    this.refs.days.textContent = `${days}`;\n    this.refs.hours.textContent = `${hours}`;\n    this.refs.minutes.textContent = `${minutes}`;\n    this.refs.seconds.textContent = `${seconds}`;\n}\n\nconst timer = new CountdownTimer({\n    targetDate: new Date('Jul 27, 2021'),\n});\n\nrefs.btnCount.addEventListener('click', () => {\n    timer.start();\n});\n\n","const delay = ms => {\n    return Promise.resolve(ms);\n  };\n  \nconst logger = time => console.log(`Resolved after ${time} ms`);\n  \n\n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n  ];\n\n\n  const toggleUserState = (allUsers, username) => {\n      return new Promise (resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    )\n    resolve (updatedUsers);\n  })\n};\n  \n  // The function should work like this\n  toggleUserState(users, 'Mango').then(console.table);\n  toggleUserState(users, 'Ajax').then(console.table);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => { \n  return new Promise ((resolve,reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } \n        reject(transaction.id);\n    }, delay);\n  })};\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  // The function should work like this\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","import './scss/main.css';\nimport './task1';\nimport './task2';\nimport './task3.1';\nimport './task3.2';\nimport './task3.3';\n\n\n"]}